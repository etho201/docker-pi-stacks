name: teslamate
services:

  teslamate:
    image: teslamate/teslamate:latest
    container_name: teslamate
    restart: always
    environment:
      - ENCRYPTION_KEY=${TESLAMATE_ENCRYPTION_KEY} #replace with a secure key to encrypt your Tesla API tokens
      - DATABASE_USER=teslamate
      - DATABASE_PASS=${TESLAMATE_DATABASE_PASSWORD} #insert your secure database password!
      - DATABASE_NAME=teslamate
      - DATABASE_HOST=teslamate-db
      - MQTT_HOST=${MQTT_HOST}
      - MQTT_USERNAME=${USERNAME}
      - MQTT_PASSWORD=${MOSQUITTO_PASSWORD}
    # ports:
    #   - 4000:4000
    # volumes:
    #   - ./import:/opt/app/import
    networks:
      - traefik
    cap_drop:
      - all
    labels:
      - autoheal=true
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.teslamate-rtr.entrypoints=websecure
      - traefik.http.routers.teslamate-rtr.rule=Host(`teslamate.$FQDN2`)
      - traefik.http.routers.teslamate-rtr.tls=true
      ## Middlewares
      # - traefik.http.routers.teslamate-rtr.middlewares=chain-no-auth@file # No Authentication
      # - traefik.http.routers.teslamate-rtr.middlewares=chain-basic-auth@file # Basic Authentication
      - traefik.http.routers.teslamate-rtr.middlewares=chain-oauth2-proxy@file # OAuth 2.0
      ## HTTP Services
      - traefik.http.routers.teslamate-rtr.service=teslamate-svc
      - traefik.http.services.teslamate-svc.loadbalancer.server.port=4000

  teslamate-db:
    image: postgres:16
    container_name: teslamate-db
    restart: always
    environment:
      - POSTGRES_USER=teslamate
      - POSTGRES_PASSWORD=${TESLAMATE_DATABASE_PASSWORD} #insert your secure database password!
      - POSTGRES_DB=teslamate
    volumes:
      - ${VOLUME_DIR}/teslamate/db:/var/lib/postgresql/data
    networks:
      - traefik

networks:
  traefik:
    name: traefik
    external: true
    #run: docker network create traefik
