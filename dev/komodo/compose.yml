services:

  komodo-db:
    image: postgres
    container_name: komodo-db
    labels:
      komodo.skip: # Prevent Komodo from stopping with StopAllContainers
    restart: unless-stopped
    logging:
      driver: ${COMPOSE_LOGGING_DRIVER:-local}
    networks:
      - traefik
    # ports:
    #   - 5432:5432
    volumes:
      - ${VOLUME_DIR}/komodo/db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${KOMODO_DB_USERNAME:-komodo}
      - POSTGRES_PASSWORD=${KOMODO_DB_PASSWORD}
      - POSTGRES_DB=${KOMODO_DATABASE_DB_NAME:-komodo}

  komodo-ferretdb:
    image: ghcr.io/ferretdb/ferretdb
    container_name: komodo-ferretdb
    labels:
      komodo.skip: # Prevent Komodo from stopping with StopAllContainers
    restart: unless-stopped
    depends_on:
      - komodo-db
    logging:
      driver: ${COMPOSE_LOGGING_DRIVER:-local}
    networks:
      - traefik
    # ports:
    #   - 27017:27017
    environment:
      - FERRETDB_POSTGRESQL_URL=postgres://komodo-db:5432/${KOMODO_DATABASE_DB_NAME:-komodo}
  
  komodo:
    image: ghcr.io/mbecker20/komodo:${COMPOSE_KOMODO_IMAGE_TAG:-latest}
    container_name: komodo
    restart: unless-stopped
    depends_on:
      - komodo-ferretdb
    logging:
      driver: ${COMPOSE_LOGGING_DRIVER:-local}
    networks:
      - traefik
    # ports:
    #   - 9120:9120
    env_file: ./compose.env
    environment:
      KOMODO_HOST: https://komodo.${FQDN}
      KOMODO_DATABASE_URI: mongodb://${KOMODO_DB_USERNAME:-komodo}:${KOMODO_DB_PASSWORD}@komodo-ferretdb:27017/${KOMODO_DATABASE_DB_NAME:-komodo}?authMechanism=PLAIN
      KOMODO_PASSKEY: ${KOMODO_PASSKEY}
      KOMODO_WEBHOOK_SECRET: ${KOMODO_WEBHOOK_SECRET}
      KOMODO_JWT_SECRET: ${KOMODO_JWT_SECRET}
    volumes:
      ## Core cache for repos for latest commit hash / contents
      - ${CONFIG_DIR}/komodo/repo-cache:/repo-cache
    labels:
      - komodo.skip= # Prevent Komodo from stopping with StopAllContainers
      - autoheal=true
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.komodo-rtr.entrypoints=websecure
      - traefik.http.routers.komodo-rtr.rule=Host(`komodo.$FQDN`)
      - traefik.http.routers.komodo-rtr.tls=true
      ## Middlewares
      # - traefik.http.routers.komodo-rtr.middlewares=chain-no-auth@file # No Authentication
      # - traefik.http.routers.komodo-rtr.middlewares=chain-basic-auth@file # Basic Authentication
      - traefik.http.routers.komodo-rtr.middlewares=chain-oauth2-proxy@file # OAuth 2.0
      ## HTTP Services
      - traefik.http.routers.komodo-rtr.service=komodo-svc
      - traefik.http.services.komodo-svc.loadbalancer.server.port=9120

  komodo-periphery:
    image: ghcr.io/mbecker20/periphery:${COMPOSE_KOMODO_IMAGE_TAG:-latest}
    container_name: komodo-periphery
    labels:
      komodo.skip: # Prevent Komodo from stopping with StopAllContainers
    restart: unless-stopped
    logging:
      driver: ${COMPOSE_LOGGING_DRIVER:-local}
    networks:
      - traefik
    env_file: ./compose.env
    environment:
      PERIPHERY_REPO_DIR: ${PERIPHERY_ROOT_DIRECTORY:-/etc/komodo}/repos
      PERIPHERY_STACK_DIR: ${PERIPHERY_ROOT_DIRECTORY:-/etc/komodo}/stacks
      PERIPHERY_SSL_KEY_FILE: ${PERIPHERY_ROOT_DIRECTORY:-/etc/komodo}/ssl/key.pem
      PERIPHERY_SSL_CERT_FILE: ${PERIPHERY_ROOT_DIRECTORY:-/etc/komodo}/ssl/cert.pem
    volumes:
      ## Mount external docker socket
      - /var/run/docker.sock:/var/run/docker.sock
      ## Allow Periphery to see processes outside of container
      - /proc:/proc
      ## Specify the Periphery agent root directory.
      ## Must be the same inside and outside the container,
      ## or docker will get confused. See https://github.com/mbecker20/komodo/discussions/180.
      - ${PERIPHERY_ROOT_DIRECTORY:-/etc/komodo}:${PERIPHERY_ROOT_DIRECTORY:-/etc/komodo}

networks:
  traefik:
    name: traefik
    external: true
    #run: docker network create traefik